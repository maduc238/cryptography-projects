#! /usr/bin/env python3
import os
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import argparse
import time
import platform

parser = argparse.ArgumentParser(
        description="Decrypt AES-128 for images")
parser.add_argument(
        "--image_file",
        type=str,
        default="data/bachkhoa_encrypted.jpg",
        help="""File ảnh đã được mã hóa, phải là dạng jpg""")
parser.add_argument(
        "--save_file",
        type=str,
        default="result.jpg",
        help="""Tên file ảnh được lưu, phải là dạng jpg""")
parser.add_argument(
        "--key",
        type=str,
        default="0123456789abcdef0123456789abcdef",
        help="""Key để mã hóa, dạng hex. Chiều dài key phải bằng 128 bit""")
parser.add_argument(
        "--mode",
        type=str,
        default="ecb",
        help="""Chế độ mã hóa plaintext, có thể là `ecb` hoặc `cbc`""")
parser.add_argument(
        "--initial_vector",
        type=str,
        default="00000000000000000000000000000000",
        help="""Vector khởi tạo trong chế độ mã hóa `cbc`""")

args = parser.parse_args()

FILE_NAME = args.image_file
MODE = args.mode
KEY = args.key.lower()
VECTOR = args.initial_vector
if MODE not in ["ecb", "cbc"]:
    print("Undefined --mode values: Must be `ecb` or `cbc`")
    exit()
if len(KEY) != 32:
    print("Length of the `--key` must be 128 bit")
    exit()
if len(VECTOR) != 32:
    print("Length of the `--initial_vector` must be 128 bit")
    exit()

time_start = time.time()
fig = plt.figure()

A = mpimg.imread(f"{FILE_NAME}")
a1 = np.array(A)
ax = fig.add_subplot(1, 2, 1)
imgplot = plt.imshow(a1)
ax.set_title('Before')
SHAPE0 = a1.shape[0]
SHAPE1 = a1.shape[1]
SHAPE2 = a1.shape[2]
# a1 = a1.reshape(a1.size)
# with open ("data/picture.data", "r+") as f:
#     for i in a1:
#         f.write(f'{i:02x}')

if platform.system() == 'Linux':
    os.system(f"gcc GiaiMa.c -o temp && ./temp {MODE[0]} {KEY} {VECTOR}")
elif platform.system() == 'Windows':
    os.system(f"gcc GiaiMa.c -o temp & temp {MODE[0]} {KEY} {VECTOR}")

a2 = []
with open ("data/picture.data", "r") as f:
    print("Reading `picture.data` ...")
    while True:
        char = f.read(2)
        if not char:
            break
        a2.append(int(char, 16))

a2 = np.array(a2[:SHAPE0*SHAPE1*SHAPE2], dtype="uint8")
a2 = a2.reshape((SHAPE0, SHAPE1, SHAPE2))
# print(a2.shape)
ax = fig.add_subplot(1, 2, 2)
imgplot = plt.imshow(a2)
mpimg.imsave(f"{args.save_file}", a2)
ax.set_title('After')
time_stop = time.time()
print(f"Encrypting time: {time_stop - time_start} seconds\n")
plt.show()
